#pragma once

#include "networkManager.hpp"
#include "processing_manager.hpp"
#include <optional>

namespace network
{
class httpClient : public observerInterface
{
  public:
	uint32_t timeout = 5000;

	httpClient(network::networkManager& netManager);

	void update() override;

	bool runTaskFlag();

	void setRunTaskFlag(bool val);

	void handle();

	void setURL(const char* url);

	std::optional<bool> postSensorData();

	bool timeoutFlag();

	void setMailBox(const char* pDataBuff);

  private:
	uint64_t				 _connTimer;
	network::networkManager& _netManager;
	bool					 _availableDataFlag = false;
	const char*				 _pURL				= nullptr;
	bool					 _timeout			= false;
	bool					 _firstCall			= true;
	/// @brief The http client acts as a consumer of the processingSubsystem (producer)
	/// sensor information is generated by processingSubsystem, and then pointer to it
	/// is
	const char* _pDataBuff = nullptr; /// Pointer to the buffer that has the sensors measurements and time measurements were taken
};
} // namespace network
